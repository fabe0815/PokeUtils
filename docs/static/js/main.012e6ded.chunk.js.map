{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","Fragment","CssBaseline","Button","variant","Public","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"yPAWeA,EAPO,kBACpB,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,QAAQ,aAAhB,cAAyC,kBAACC,EAAA,EAAD,SCPvCC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UACgB,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MAC1B,2DASJ,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GAELA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WACtBX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,GAETL,GAAUA,EAAOa,WAC1Bb,EAAOa,UAAUR,UAM1BS,OAAM,eC7BXC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwD1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAKzE,GAJkB,IAAIkB,IACnBC,aACD1B,OAAOC,SAAS0B,MAEJC,SAAW5B,OAAOC,SAAS2B,OACvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,aAAN,sBAEP5B,IAnCV,SAAiCO,EAAeC,GAC9CwB,MAAMzB,GACHK,MAAK,SAACqB,GACL,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACU,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAE/C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAACC,GAClCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAIpBnC,EAAgBC,EAAOC,MAG1Bc,OAAM,eAmBHoB,CAAwBnC,EAAOC,GAE/BC,UAAUC,cAAc6B,MAAM3B,MAAK,gBAInCN,EAAgBC,EAAOC,OC1E/BE,K","file":"static/js/main.012e6ded.chunk.js","sourcesContent":["import React from \"react\";\nimport { CssBaseline, Button } from \"@material-ui/core\";\nimport { Public } from \"@material-ui/icons\";\n\nconst App: React.FC = () => (\n  <React.Fragment>\n    <CssBaseline />\n    <Button variant=\"contained\">Hello &nbsp; <Public /></Button>\n  </React.Fragment>\n);\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\"\n  || window.location.hostname === \"[::1]\"\n  || window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        };\n      };\n    })\n    .catch(() => {\n      // console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  fetch(swUrl)\n    .then((response) => {\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // console.error(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"typeface-roboto\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.register();\n"],"sourceRoot":""}